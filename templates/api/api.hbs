import { rtkApi } from '@/shared/api/rtkApi';

interface IApiProps {

}

export const {{camelCase name}}Api = rtkApi.injectEndpoints({
	endpoints: (build) => ({
		fetchData: build.query<
			any,
			IApiProps,
		>({
			query: ({  }) => ({
				url: '',
				params: {},
			}),
			providesTags: (result) => [''],
		}),

		addData: build.mutation<
			any,
			IApiProps,
		>({
			query: ({  }) => ({
				url: '',
				method: 'Post',
				body: {},
			}),
			async onQueryStarted({  }, { dispatch, queryFulfilled }) {
				const patchResult = dispatch(
					{{camelCase name}}Api.util.updateQueryData(
						'fetchData',
						{  },
						(draft) => {
							Object.assign(draft, {

							});
						},
					),
				);
				try {
					await queryFulfilled;
				} catch {
					patchResult.undo();
				}
			},
			invalidatesTags: [''],
		}),
	}),
});

export const {} = {{camelCase name}}Api;
